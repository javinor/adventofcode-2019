// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

var inputPath = "./src/" + (Path.parse("Day06.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8").split("\n");

var dummy_input = /* array */[
  "COM)B",
  "B)C",
  "C)D",
  "D)E",
  "E)F",
  "B)G",
  "G)H",
  "D)I",
  "E)J",
  "J)K",
  "K)L"
];

var objects = $$Array.fold_left(Belt_SetString.add, Belt_SetString.empty, input.join(")").split(")"));

var orbitedBy = $$Array.fold_left((function (orbitedBy, param) {
        var satellite = param[1];
        return Belt_MapString.update(orbitedBy, param[0], (function (satellites) {
                      return /* :: */[
                              satellite,
                              Js_option.getWithDefault(/* [] */0, satellites)
                            ];
                    }));
      }), Belt_MapString.empty, $$Array.map((function (arr) {
            return /* tuple */[
                    Caml_array.caml_array_get(arr, 0),
                    Caml_array.caml_array_get(arr, 1)
                  ];
          }), $$Array.map((function (param) {
                return param.split(")");
              }), input)));

function tree_of_map(map, root) {
  var match = Belt_MapString.get(map, root);
  if (match !== undefined) {
    return /* Node */Block.__(0, [
              root,
              List.map((function (param) {
                      return tree_of_map(map, param);
                    }), match)
            ]);
  } else {
    return /* Leaf */Block.__(1, [root]);
  }
}

function sumTreeDepths(tree) {
  var go = function (tree, depth) {
    if (tree.tag) {
      return depth;
    } else {
      return List.fold_left((function (acc, t) {
                    return acc + go(t, depth + 1 | 0) | 0;
                  }), depth, tree[1]);
    }
  };
  return go(tree, 0);
}

var orbitsTree = tree_of_map(orbitedBy, "COM");

var result = sumTreeDepths(orbitsTree);

console.log("Part1 result: ", result);

var Part1 = /* module */[
  /* objects */objects,
  /* orbitedBy */orbitedBy,
  /* tree_of_map */tree_of_map,
  /* sumTreeDepths */sumTreeDepths,
  /* orbitsTree */orbitsTree,
  /* result */result
];

console.log("Part2 result: ", "TBD");

var Part2 = /* module */[];

exports.inputPath = inputPath;
exports.input = input;
exports.dummy_input = dummy_input;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
