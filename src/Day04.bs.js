// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_SetInt = require("bs-platform/lib/js/belt_SetInt.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_SortArrayInt = require("bs-platform/lib/js/belt_SortArrayInt.js");

var inputPath = "./src/" + (Path.parse("Day04.re").name + ".input");

function toDigits(n) {
  var go = function (_acc, _n) {
    while(true) {
      var n = _n;
      var acc = _acc;
      if (n !== 0) {
        _n = n / 10 | 0;
        _acc = /* :: */[
          n % 10,
          acc
        ];
        continue ;
      } else {
        return acc;
      }
    };
  };
  return $$Array.of_list(List.rev(go(/* [] */0, n)));
}

function areDigitsAscending(digits) {
  var ascendingDigits = Belt_SortArrayInt.stableSort(digits).reverse();
  return Caml_obj.caml_equal(digits, ascendingDigits);
}

function hasRepeatingDigits(digits) {
  var uniqueDigits = Belt_SetInt.fromArray(digits);
  return Belt_SetInt.size(uniqueDigits) <= 5;
}

function qualifyingPasswords(from, to_) {
  var _passwords = /* [] */0;
  var _n = from;
  var to_$1 = to_;
  while(true) {
    var n = _n;
    var passwords = _passwords;
    if (n > to_$1) {
      return passwords;
    } else {
      var digits = toDigits(n);
      var match = areDigitsAscending(digits) && hasRepeatingDigits(digits);
      var nextPasswords = match ? /* :: */[
          n,
          passwords
        ] : passwords;
      _n = n + 1 | 0;
      _passwords = nextPasswords;
      continue ;
    }
  };
}

var result = qualifyingPasswords(168630, 718098);

console.log("Part1 result: ", List.length(result));

var Part1 = /* module */[
  /* hasRepeatingDigits */hasRepeatingDigits,
  /* qualifyingPasswords */qualifyingPasswords,
  /* result */result
];

function hasDoubleDigits(digits) {
  var histogram = Caml_array.caml_make_vect(10, 0);
  $$Array.iter((function (digit) {
          return Caml_array.caml_array_set(histogram, digit, Caml_array.caml_array_get(histogram, digit) + 1 | 0);
        }), digits);
  return Js_option.isSome(Caml_option.undefined_to_opt(histogram.find((function (n) {
                        return n === 2;
                      }))));
}

function qualifyingPasswords$1(from, to_) {
  var _passwords = /* [] */0;
  var _n = from;
  var to_$1 = to_;
  while(true) {
    var n = _n;
    var passwords = _passwords;
    if (n > to_$1) {
      return passwords;
    } else {
      var digits = toDigits(n);
      var match = areDigitsAscending(digits) && hasDoubleDigits(digits);
      var nextPasswords = match ? /* :: */[
          n,
          passwords
        ] : passwords;
      _n = n + 1 | 0;
      _passwords = nextPasswords;
      continue ;
    }
  };
}

var result$1 = qualifyingPasswords$1(168630, 718098);

console.log("Part2 result: ", List.length(result$1));

var Part2 = /* module */[
  /* hasDoubleDigits */hasDoubleDigits,
  /* qualifyingPasswords */qualifyingPasswords$1,
  /* result */result$1
];

var bottom = 168630;

var top = 718098;

exports.inputPath = inputPath;
exports.bottom = bottom;
exports.top = top;
exports.toDigits = toDigits;
exports.areDigitsAscending = areDigitsAscending;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
