// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var List = require("bs-platform/lib/js/list.js");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

var inputPath = "./src/" + (Path.parse("Day08.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8");

function toChunks(xs, size) {
  var go = function (_result, _xs, size) {
    while(true) {
      var xs = _xs;
      var result = _result;
      if (List.length(xs) === 0) {
        return result;
      } else {
        var match = Belt_Option.getExn(Belt_List.splitAt(xs, size));
        _xs = match[1];
        _result = /* :: */[
          match[0],
          result
        ];
        continue ;
      }
    };
  };
  return List.rev(go(/* [] */0, xs, size));
}

function countNum(xs, num) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, List.map((function (x) {
                    var match = Caml_obj.caml_equal(x, num);
                    if (match) {
                      return 1;
                    } else {
                      return 0;
                    }
                  }), xs));
}

var nLayerPixels = 150;

var layers = $$Array.of_list(toChunks($$Array.to_list($$Array.map(Caml_format.caml_int_of_string, input.split(""))), nLayerPixels));

var zeroCount = $$Array.map((function (l) {
        return countNum(l, 0);
      }), layers);

var minZeroes = $$Array.fold_left(Caml_obj.caml_min, Pervasives.max_int, zeroCount);

var minZeroesIndex = zeroCount.findIndex((function (z) {
        return z === minZeroes;
      }));

var ones = countNum(Caml_array.caml_array_get(layers, minZeroesIndex), 1);

var twos = countNum(Caml_array.caml_array_get(layers, minZeroesIndex), 2);

console.log("Part1 result: ", Caml_int32.imul(ones, twos));

var Part1 = /* module */[
  /* layers */layers,
  /* zeroCount */zeroCount,
  /* minZeroes */minZeroes,
  /* minZeroesIndex */minZeroesIndex,
  /* ones */ones,
  /* twos */twos
];

var layers$1 = List.map((function (l) {
        return List.map((function (n) {
                      if (n > 2 || n < 0) {
                        return Pervasives.failwith("invalid input: unknown color " + String(n));
                      } else {
                        return n;
                      }
                    }), l);
      }), toChunks($$Array.to_list($$Array.map(Caml_format.caml_int_of_string, input.split(""))), nLayerPixels));

var image = $$Array.of_list(List.map((function (row) {
              return $$Array.of_list(row).join("");
            }), toChunks(List.map((function (c) {
                      switch (c) {
                        case 0 : 
                            return " ";
                        case 1 : 
                            return "#";
                        case 2 : 
                            return Pervasives.failwith("should not have transparent colors remaining");
                        
                      }
                    }), List.fold_left((function (image, layer) {
                          return Belt_List.zipBy(image, layer, (function (topColor, bottomColor) {
                                        if (topColor >= 2) {
                                          return bottomColor;
                                        } else {
                                          return topColor;
                                        }
                                      }));
                        }), Belt_List.make(nLayerPixels, /* Transparent */2), layers$1)), 25))).join("\n");

console.log("Part2 result:");

console.log(image);

var Part2 = /* module */[
  /* layers */layers$1,
  /* image */image
];

var width = 25;

var height = 6;

exports.inputPath = inputPath;
exports.input = input;
exports.toChunks = toChunks;
exports.countNum = countNum;
exports.width = width;
exports.height = height;
exports.nLayerPixels = nLayerPixels;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
