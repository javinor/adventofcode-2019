// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var IntCodeComputer$Adventofcode2019 = require("./IntCodeComputer.bs.js");

var inputPath = "./src/" + (Path.parse("Day09.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8");

var program = $$Array.map(Caml_format.caml_float_of_string, input.split(","));

var $$break = /* record */[/* contents */false];

var computer = /* record */[/* contents */IntCodeComputer$Adventofcode2019.make(undefined, program)];

while(!$$break[0]) {
  var match = IntCodeComputer$Adventofcode2019.run(computer[0], /* array */[1]);
  var exitCode = match[1];
  computer[0] = match[0];
  if (typeof exitCode === "number") {
    if (exitCode !== 0) {
      Pervasives.failwith("program should finish with output");
    } else {
      $$break[0] = true;
    }
  } else {
    console.log("Part1 output: ", exitCode[0], "\n");
  }
};

var Part1 = /* module */[
  /* program */program,
  /* break */$$break,
  /* computer */computer
];

var program$1 = $$Array.map(Caml_format.caml_float_of_string, input.split(","));

var $$break$1 = /* record */[/* contents */false];

var computer$1 = /* record */[/* contents */IntCodeComputer$Adventofcode2019.make(undefined, program$1)];

while(!$$break$1[0]) {
  var match$1 = IntCodeComputer$Adventofcode2019.run(computer$1[0], /* array */[2]);
  var exitCode$1 = match$1[1];
  computer$1[0] = match$1[0];
  if (typeof exitCode$1 === "number") {
    if (exitCode$1 !== 0) {
      Pervasives.failwith("program should finish with output");
    } else {
      $$break$1[0] = true;
    }
  } else {
    console.log("Part2 output: ", exitCode$1[0], "\n");
  }
};

var Part2 = /* module */[
  /* program */program$1,
  /* break */$$break$1,
  /* computer */computer$1
];

exports.inputPath = inputPath;
exports.input = input;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
