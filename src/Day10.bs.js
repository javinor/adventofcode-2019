// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_SortArray = require("bs-platform/lib/js/belt_SortArray.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");

var inputPath = "./src/" + (Path.parse("Day10.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8");

var cmp = Caml_obj.caml_compare;

var CartesianPoints = Belt_Id.MakeComparable(/* module */[/* cmp */cmp]);

var cmp$1 = Caml_obj.caml_compare;

var ThreeTuple = Belt_Id.MakeComparable(/* module */[/* cmp */cmp$1]);

function parseAsteroids(input) {
  return $$Array.fold_left((function (asteroids, coords) {
                if (coords !== undefined) {
                  return Belt_Set.add(asteroids, coords);
                } else {
                  return asteroids;
                }
              }), Belt_Set.make(CartesianPoints), Belt_Array.concatMany($$Array.mapi((function (y, row) {
                        return $$Array.mapi((function (x, str) {
                                      var match = str === "#";
                                      if (match) {
                                        return /* tuple */[
                                                x,
                                                y
                                              ];
                                      }
                                      
                                    }), row);
                      }), $$Array.map((function (param) {
                            return param.split("");
                          }), input.split("\n")))));
}

function gcd(m, n) {
  var go = function (_m, _n) {
    while(true) {
      var n = _n;
      var m = _m;
      var match = n === 0;
      if (match) {
        return m;
      } else {
        _n = Caml_int32.mod_(m, n);
        _m = n;
        continue ;
      }
    };
  };
  var m$1 = Pervasives.abs(m);
  var n$1 = Pervasives.abs(n);
  var match = n$1 > m$1;
  if (match) {
    return go(n$1, m$1);
  } else {
    return go(m$1, n$1);
  }
}

function linearCoefficients(param, param$1) {
  var y0 = param$1[1];
  var x0 = param$1[0];
  var y = param[1];
  var x = param[0];
  var a = y - y0 | 0;
  var b = x - x0 | 0;
  var c = Caml_int32.imul(x, y0) - Caml_int32.imul(x0, y) | 0;
  var gcd_ab = gcd(a, b);
  var gcd_ac = gcd(a, c);
  var gcd_bc = gcd(b, c);
  if (a !== 0) {
    if (b !== 0) {
      if (c !== 0) {
        var gcd_abc = gcd(gcd_ab, c);
        return /* tuple */[
                Caml_int32.div(a, gcd_abc),
                Caml_int32.div(b, gcd_abc),
                Caml_int32.div(c, gcd_abc)
              ];
      } else {
        return /* tuple */[
                Caml_int32.div(a, gcd_ab),
                Caml_int32.div(b, gcd_ab),
                0
              ];
      }
    } else {
      return /* tuple */[
              Caml_int32.div(a, gcd_ac),
              0,
              Caml_int32.div(c, gcd_ac)
            ];
    }
  } else {
    var exit = 0;
    if (b !== 0 || c !== 0) {
      exit = 1;
    } else {
      return Pervasives.failwith("input points must be different from each other");
    }
    if (exit === 1) {
      return /* tuple */[
              0,
              Caml_int32.div(b, gcd_bc),
              Caml_int32.div(c, gcd_bc)
            ];
    }
    
  }
}

function countVisibleAsteroids(param, asteroids) {
  var y = param[1];
  var x = param[0];
  var __x = $$Array.map((function (ast) {
          return linearCoefficients(/* tuple */[
                      x,
                      y
                    ], ast);
        }), asteroids);
  return Belt_Set.size(Belt_Set.fromArray(__x, ThreeTuple));
}

var asteroids = parseAsteroids(input);

var asteroidScores = $$Array.map((function (p) {
        return /* tuple */[
                p,
                countVisibleAsteroids(p, Belt_Set.toArray(Belt_Set.remove(asteroids, p)))
              ];
      }), Belt_Set.toArray(asteroids));

var result = $$Array.fold_left((function (p, q) {
        var match = p[1] > q[1];
        if (match) {
          return p;
        } else {
          return q;
        }
      }), /* tuple */[
      /* tuple */[
        0,
        0
      ],
      Pervasives.min_int
    ], asteroidScores);

console.log("Part1 output: ", result);

var Part1 = /* module */[
  /* countVisibleAsteroids */countVisibleAsteroids,
  /* asteroids */asteroids,
  /* asteroidScores */asteroidScores,
  /* result */result
];

function square(x) {
  return Caml_int32.imul(x, x);
}

function norm(param, param$1) {
  var x = param[0] - param$1[0] | 0;
  var x$1 = param[1] - param$1[1] | 0;
  return Math.sqrt(Caml_int32.imul(x, x) + Caml_int32.imul(x$1, x$1) | 0);
}

var station = result[0];

var __x = parseAsteroids(input);

var asteroidsGroupedByLineOfSite = Belt_Map.toArray($$Array.fold_left((function (abcToPoint, param) {
            var p = param[0];
            return Belt_Map.update(abcToPoint, param[1], (function (value) {
                          if (value !== undefined) {
                            return Caml_option.some(Belt_Set.add(Caml_option.valFromOption(value), p));
                          } else {
                            return Caml_option.some(Belt_Set.fromArray(/* array */[p], CartesianPoints));
                          }
                        }));
          }), Belt_Map.make(ThreeTuple), $$Array.map((function (p) {
                return /* tuple */[
                        p,
                        linearCoefficients(p, station)
                      ];
              }), Belt_Set.toArray(Belt_Set.remove(__x, station)))));

var __x$1 = Belt_Array.concatMany($$Array.map((function (param) {
            var phi = param[0];
            var __x = Belt_Set.toArray(param[1]);
            return $$Array.mapi((function (i, p) {
                          return /* tuple */[
                                  phi + i * 2 * Math.PI,
                                  p
                                ];
                        }), Belt_SortArray.stableSortBy(__x, (function (p1, p2) {
                              return Caml_primitive.caml_float_compare(norm(station, p1), norm(station, p2));
                            })));
          }), $$Array.map((function (param) {
                var abc = param[0];
                var a = abc[0];
                var phi;
                if (a !== 0) {
                  var b = abc[1];
                  if (b !== 0) {
                    phi = Math.atan2(a, b);
                  } else {
                    var match = a > 0;
                    phi = (
                      match ? 1 : -1
                    ) * Math.PI / 2;
                  }
                } else {
                  var match$1 = abc[1] > 0;
                  phi = match$1 ? 0 : Math.PI;
                }
                var match$2 = phi < -1 * Math.PI / 2;
                var orderedPhi = match$2 ? phi + Math.PI * 2 : phi;
                return /* tuple */[
                        orderedPhi,
                        param[1]
                      ];
              }), asteroidsGroupedByLineOfSite)));

var orderedAsteroids = Belt_SortArray.stableSortBy(__x$1, (function (param, param$1) {
        return Caml_primitive.caml_float_compare(param[0], param$1[0]);
      }));

var result$1 = Caml_array.caml_array_get(orderedAsteroids, 199);

console.log("Part2 output: ", result$1);

var Part2 = /* module */[
  /* square */square,
  /* norm */norm,
  /* station */station,
  /* asteroidsGroupedByLineOfSite */asteroidsGroupedByLineOfSite,
  /* orderedAsteroids */orderedAsteroids,
  /* result */result$1
];

exports.inputPath = inputPath;
exports.input = input;
exports.CartesianPoints = CartesianPoints;
exports.ThreeTuple = ThreeTuple;
exports.parseAsteroids = parseAsteroids;
exports.gcd = gcd;
exports.linearCoefficients = linearCoefficients;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
