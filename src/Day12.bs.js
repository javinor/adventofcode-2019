// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var inputPath = "./src/" + (Path.parse("Day12.re").name + ".input");

var input = Fs.readFileSync(inputPath, "utf8").split("\n");

function parsePoint(str) {
  var re = (/^<x=(.+), y=(.+), z=(.+)>$/);
  var exit = 0;
  var val;
  try {
    val = $$Array.map(Caml_format.caml_int_of_string, $$Array.map((function (prim) {
                return prim.trim();
              }), Js_option.getExn(Caml_option.null_to_opt(str.match(re))).slice(1)));
    exit = 1;
  }
  catch (raw_e){
    var e = Caml_js_exceptions.internalToOCamlException(raw_e);
    console.log("exception was raised while parsing input: " + str, e);
    throw e;
  }
  if (exit === 1) {
    if (val.length !== 3) {
      return Pervasives.failwith("failed to parse input: " + str);
    } else {
      var x = val[0];
      var y = val[1];
      var z = val[2];
      return /* tuple */[
              /* Position */Block.__(0, [
                  x,
                  y,
                  z
                ]),
              /* Velocity */Block.__(1, [
                  0,
                  0,
                  0
                ])
            ];
    }
  }
  
}

function sign(n) {
  var match = n > 0;
  if (match) {
    return 1;
  } else {
    var match$1 = n < 0;
    if (match$1) {
      return -1;
    } else {
      return 0;
    }
  }
}

function applyGravity(p1, p2) {
  var match = p1[0];
  if (match.tag) {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Day12.re",
            30,
            8
          ]
        ];
  } else {
    var match$1 = p1[1];
    var z1 = match[2];
    var y1 = match[1];
    var x1 = match[0];
    if (match$1.tag) {
      var match$2 = p2[0];
      if (match$2.tag) {
        throw [
              Caml_builtin_exceptions.match_failure,
              /* tuple */[
                "Day12.re",
                31,
                8
              ]
            ];
      } else {
        var match$3 = p2[1];
        var z2 = match$2[2];
        var y2 = match$2[1];
        var x2 = match$2[0];
        if (match$3.tag) {
          var dvx1 = sign(Caml_primitive.caml_int_compare(x2, x1));
          var dvy1 = sign(Caml_primitive.caml_int_compare(y2, y1));
          var dvz1 = sign(Caml_primitive.caml_int_compare(z2, z1));
          var dvx2 = Caml_int32.imul(-1, dvx1);
          var dvy2 = Caml_int32.imul(-1, dvy1);
          var dvz2 = Caml_int32.imul(-1, dvz1);
          var p1$prime_000 = /* Position */Block.__(0, [
              x1,
              y1,
              z1
            ]);
          var p1$prime_001 = /* Velocity */Block.__(1, [
              match$1[0] + dvx1 | 0,
              match$1[1] + dvy1 | 0,
              match$1[2] + dvz1 | 0
            ]);
          var p1$prime = /* tuple */[
            p1$prime_000,
            p1$prime_001
          ];
          var p2$prime_000 = /* Position */Block.__(0, [
              x2,
              y2,
              z2
            ]);
          var p2$prime_001 = /* Velocity */Block.__(1, [
              match$3[0] + dvx2 | 0,
              match$3[1] + dvy2 | 0,
              match$3[2] + dvz2 | 0
            ]);
          var p2$prime = /* tuple */[
            p2$prime_000,
            p2$prime_001
          ];
          return /* tuple */[
                  p1$prime,
                  p2$prime
                ];
        } else {
          throw [
                Caml_builtin_exceptions.match_failure,
                /* tuple */[
                  "Day12.re",
                  31,
                  8
                ]
              ];
        }
      }
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Day12.re",
              30,
              8
            ]
          ];
    }
  }
}

function applyVelocity(p) {
  var match = p[0];
  if (match.tag) {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Day12.re",
            54,
            8
          ]
        ];
  } else {
    var match$1 = p[1];
    if (match$1.tag) {
      var vz = match$1[2];
      var vy = match$1[1];
      var vx = match$1[0];
      return /* tuple */[
              /* Position */Block.__(0, [
                  match[0] + vx | 0,
                  match[1] + vy | 0,
                  match[2] + vz | 0
                ]),
              /* Velocity */Block.__(1, [
                  vx,
                  vy,
                  vz
                ])
            ];
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Day12.re",
              54,
              8
            ]
          ];
    }
  }
}

function totalEnergy(p) {
  var match = p[0];
  if (match.tag) {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Day12.re",
            60,
            8
          ]
        ];
  } else {
    var match$1 = p[1];
    if (match$1.tag) {
      var energy = function (coords) {
        return $$Array.fold_left((function (prim, prim$1) {
                      return prim + prim$1 | 0;
                    }), 0, $$Array.map(Pervasives.abs, coords));
      };
      return Caml_int32.imul(energy(/* array */[
                      match[0],
                      match[1],
                      match[2]
                    ]), energy(/* array */[
                      match$1[0],
                      match$1[1],
                      match$1[2]
                    ]));
    } else {
      throw [
            Caml_builtin_exceptions.match_failure,
            /* tuple */[
              "Day12.re",
              60,
              8
            ]
          ];
    }
  }
}

function tick(pvs, n) {
  var _pvs = $$Array.copy(pvs);
  var _n = n;
  while(true) {
    var n$1 = _n;
    var pvs$1 = _pvs;
    if (n$1 === 0) {
      return pvs$1;
    } else {
      for(var i = 0 ,i_finish = pvs$1.length - 1 | 0; i <= i_finish; ++i){
        for(var j = i + 1 | 0 ,j_finish = pvs$1.length - 1 | 0; j <= j_finish; ++j){
          var match = applyGravity(Caml_array.caml_array_get(pvs$1, i), Caml_array.caml_array_get(pvs$1, j));
          Caml_array.caml_array_set(pvs$1, i, match[0]);
          Caml_array.caml_array_set(pvs$1, j, match[1]);
        }
      }
      var pvs$prime = $$Array.map(applyVelocity, pvs$1);
      _n = n$1 - 1 | 0;
      _pvs = pvs$prime;
      continue ;
    }
  };
}

var pvs = $$Array.map(parsePoint, input);

var result = $$Array.fold_left((function (prim, prim$1) {
        return prim + prim$1 | 0;
      }), 0, $$Array.map(totalEnergy, tick(pvs, 1000)));

console.log("Part1 output: ", result);

var Part1 = /* module */[
  /* sign */sign,
  /* applyGravity */applyGravity,
  /* applyVelocity */applyVelocity,
  /* totalEnergy */totalEnergy,
  /* tick */tick,
  /* pvs */pvs,
  /* result */result
];

var result$1 = "TBD";

console.log("Part2 output: ", result$1);

var Part2 = /* module */[/* result */result$1];

exports.inputPath = inputPath;
exports.input = input;
exports.parsePoint = parsePoint;
exports.Part1 = Part1;
exports.Part2 = Part2;
/* inputPath Not a pure module */
